#!/bin/zsh -f

setopt extendedglob
setopt err_exit
umask 022

DOC="\
${0:t} build libobjcryst source bundle from fox-objcryst and cctbx repos.
usage: ${0:t} [options] [all] [N] [N1-N2]

Perform selected build steps in sequence.  Select all steps with 'all'
or only specific steps with a step number N or a range N1-N2.
Use option --list to display all steps.

Options:

  -l, --list    show a numbered list of build steps and exit
  --clean       remove all generated files except downloads
  -h, --help    display this message and exit
"
DOC=${${DOC##[[:space:]]##}%%[[:space:]]##}
MYDIR=${0:A:h}
BASEDIR=${MYDIR}
BDIR=${BASEDIR}/build

# Upstream code repositories -------------------------------------------------

## edit URLs in this section to follow upstream updates.

# URLs to source code bundles in pairs of (directory, URL)
tarballs=(
    cctbx
        http://cci.lbl.gov/cctbx_build/results/2013_07_05_0005/cctbx_bundle.tar.gz
    newmat
        http://www.robertnz.net/ftp/newmat11.tar.gz
)

# Subversion repositories defined in pairs of (targetpath, URL)
svnrepos=(
    ObjCryst
        https://svn.code.sf.net/p/objcryst/code/trunk/ObjCryst@1378
)

# Parse Options --------------------------------------------------------------

[[ 0 != $# ]] || opt_help=1

zmodload zsh/zutil
zparseopts -K -E -D \
    h=opt_help -help=opt_help l=opt_list -list=opt_list -clean=opt_clean

if [[ -n ${opt_help} ]]; then
    print -r -- $DOC
    exit
fi

typeset -aU selection
for n; do
    if [[ $n == [[:digit:]]##-[[:digit:]]## ]]; then
        selection=( $selection {${n%%-*}..${n##*-}} )
    elif [[ $n == [[:digit:]]## ]]; then
        selection=( $selection $n )
    elif [[ $n == all ]]; then
        selection=( {1..100} )
    else
        print -u2 "Invalid option or argument '$n'."
        exit 2
    fi
done

if [[ -n ${opt_list} && -z ${selection} ]]; then
    selection=( {1..100} )
fi

# Define functions used in build steps ---------------------------------------

integer BIDX=0

ListSkipOrBuild() {
    local name=${1?}
    (( ++BIDX ))
    if [[ -z ${(M)selection:#${BIDX}} ]]; then
        return 0
    fi
    if [[ -n ${opt_list} ]]; then
        print $BIDX $name
        return 0
    fi
    local dashline="# $BIDX $name ${(l:80::-:):-}"
    print ${dashline[1,78]}
    # return false status to trigger the build section
    return 1
}


fetchtarball() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    if [[ -f ${tgtdir}/${url:t} ]]; then
        return
    fi
    mkdir -p $tgtdir
    ( cd $tgtdir && curl -z ${url:t} -O $url && tar xzf ${url:t} )
}


fetchsvnrepository() {
    [[ $# == 2 ]] || exit $?
    local tgtdir=$1 url=$2
    svn checkout --quiet $url $tgtdir
}


typeset -aU cctbx_sources
assign_cctbx_sources() {
    [[ 0 == ${#cctbx_sources} ]] || return
    local lines
    pushd ${BDIR}/cctbx/cctbx_build
    lines=( ${(f)"$(bin/libtbx.scons -n --tree=all lib/libcctbx.a)"} )
    lines=( ${${(M)lines:#*+-*.(h|cpp)}#*+-} )
    cctbx_sources=( $lines )
    cctbx_sources=(
        {.,../cctbx_sources}/${^${cctbx_sources:#/*}}(N-.:a)
        ${(M)cctbx_sources:#/*}
    )
    popd
    # explicitly exclude unnecessary sources
    cctbx_sources=( ${cctbx_sources:#*/eltbx/electron_scattering*} )
}

# Build commands here --------------------------------------------------------

cd $BASEDIR

if [[ -n $opt_clean ]]; then
    print "# Clean generated files"
    rm -rf ${BDIR}/bundle
    rm -rf ${BDIR}/cctbx/cctbx_build
fi

ListSkipOrBuild "download upstream sources" || (
    mkdir -p $BDIR
    cd $BDIR
    for t u in $svnrepos;  fetchsvnrepository $t $u
    for t u in $tarballs;  fetchtarball $t $u
)


ListSkipOrBuild "configure cctbx" || {
    mkdir -p ${BDIR}/cctbx/cctbx_build
    # minimum configuration that generates all files used in ObjCryst
    cctbx_configargs=(
        --no-bin-python
        --static-libraries
        --build-boost-python-extensions=False
        cctbx
    )
    cd ${BDIR}/cctbx/cctbx_build
    python ../cctbx_sources/libtbx/configure.py $cctbx_configargs
    # compile one file to make "scons -n" work in assign_cctbx_sources
    bin/libtbx.scons cctbx/uctbx/uctbx.o
}


ListSkipOrBuild "create bundle tag" || {
    GITLASTCOMMIT=$(cd $BASEDIR && git rev-parse HEAD)
    cd ${BDIR}
    if [[ ! -d bundle ]]; then
        git clone ${BASEDIR} bundle
    fi
    cd bundle
    git fetch origin
    git checkout --detach --quiet $GITLASTCOMMIT
    git rm --force --ignore-unmatch makesdist
    # objcryst
    objcryst_exclude=(
        /doc  /example  /wxCryst
        Makefile  '*.mak' '.cvs*'
    )
    rsync -a --delete --delete-excluded \
        --exclude=${^objcryst_exclude} --cvs-exclude \
        --link-dest=${BDIR}/ObjCryst ${BDIR}/ObjCryst/ src/ObjCryst/
    # newmat
    rsync -a --delete \
        --exclude='newmat*.tar.gz' \
        --link-dest=${BDIR}/newmat ${BDIR}/newmat/ src/newmat/
    # cctbx
    assign_cctbx_sources
    for f in $cctbx_sources; do
        if [[ $f == ${BDIR}/*/include/*.h ]]; then
            t=src/cctbx/include/${f##*/include/}
        elif [[ $f == *.h ]]; then
            t=src/cctbx/include/${f##${BDIR}*cctbx_(build|sources)/}
        else
            t=src/cctbx/${f##${BDIR}*cctbx_(build|sources)/}
        fi
        test -d ${t:h} || mkdir -p ${t:h}
        ln -f $f $t
    done
    ln -f ${BDIR}/cctbx/cctbx_sources/cctbx/*.txt src/cctbx/
    # Commit and create a bundle tag
    git add --all src
    if ! git diff --cached --quiet; then
        git commit -m "Bundle generated from scripts at $GITLASTCOMMIT."
        git tag -f bundle
    fi
    git push -f ${BASEDIR} tags/bundle:bundle
}


ListSkipOrBuild "write libobjcryst tarball" || {
    cd $BASEDIR
    version=$(git describe --match='s[[:digit:]]*')
    version=${${version#s}%-g[[:xdigit:]]##}
    prefix=libobjcryst-${version}
    output=${prefix}.tar.gz
    git -c tar.umask=0022 archive --prefix=${prefix}/ -o $output bundle
    if git tag -a -m "Release bundle for ${version}" "v$version" bundle; then
        print "Release bundle tagged as v$version."
    fi
}
