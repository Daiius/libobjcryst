import os
import re
import string

Import('env')


def build_VersionCode(target, source, env):
    tplcode = source[0].get_contents()
    numversion = (1000000 * ginfo['major'] +
            1000 * ginfo['minor'] + ginfo['micro'] +
            0.0001 * ginfo['number'])
    libversion = "%.0f" % numversion
    if ginfo['number']:
        libversion = "%.4f" % numversion
    if ginfo['prerelease']:
        libversion = "(-0.5 + %s)" % libversion
    flds = {
        'LIBOBJCRYST_VERSION' : libversion,
        'LIBOBJCRYST_VERSION_MAJOR' : ginfo['major'],
        'LIBOBJCRYST_VERSION_MINOR' : ginfo['minor'],
        'LIBOBJCRYST_VERSION_MICRO' : ginfo['micro'],
        'LIBOBJCRYST_VERSION_STR' : ginfo['version'],
        'LIBOBJCRYST_VERSION_DATE' : ginfo['date'],
        'LIBOBJCRYST_GIT_SHA' : ginfo['commit'],
    }
    versiontemplate = string.Template(tplcode)
    versioncode = versiontemplate.safe_substitute(flds)
    open(target[0].path, 'w').write(versioncode)
    return None


env.Append(BUILDERS={'BuildVersionCode' :
        Builder(action=build_VersionCode, suffix='.h', src_suffix='.tpl')})

# Targets --------------------------------------------------------------------

vhpp = File('ObjCryst/version.h')

MY_GIT_MISSING_ERROR_MSG = """
Cannot determine libobjcryst version.  Build from a git repository
or use a source archive from

    https://github.com/diffpy/libobjcryst/releases
"""

# If version.h exists do not use git
if not os.path.isfile(str(vhpp.srcnode())):
    from libobjcrystbuildutils import gitinfo
    vtpl = File('ObjCryst/version.tpl')
    ginfo = gitinfo()
    if not ginfo:
        print MY_GIT_MISSING_ERROR_MSG
        Exit(1)
    vhpp, = env.BuildVersionCode(['ObjCryst/version.h'], vtpl)
    env.Depends(vhpp, env.Value(ginfo['version'] + ginfo['commit']))

env['lib_includes'] += [vhpp]

# vim: ft=python
