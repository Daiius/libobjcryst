import os
from libobjcrystbuildutils import gitinfo

Import('env')


def add_version_and_compress(target, source, env):
    import tarfile
    tfin = tarfile.open(target[0].path)
    tfout = tarfile.open(target[0].path + '.gz', 'w:gz')
    # copy archive members up to the ObjCryst/version.cpp member.
    tiiter = iter(tfin)
    for ti in tiiter:
        tfout.addfile(ti, tfin.extractfile(ti))
        if ti.name.endswith('src/ObjCryst/version.cpp'):
            break
    assert ti.name.endswith('version.cpp'), \
        "diffpy/version.cpp not found in tar archive."
    # add the generated version.h file to the archive.
    vp = source[0].path
    ti.name = ti.name[:-4] + '.h'
    ti.size = os.path.getsize(vp)
    tfout.addfile(ti, open(vp, 'rb'))
    # finally copy the remaining members in the input tar file.
    for ti in tiiter:
        tfout.addfile(ti, tfin.extractfile(ti))
    tfout.close()
    tfin.close()
    return


def die_without_git(target, source, env):
    print('sdist  must be built from a git repository.')
    Exit(1)
    return


def generate_sdist_actions(target, source, env, for_signature):
    actions = []
    ginfo = gitinfo()
    if not ginfo:  return [die_without_git]
    prefix = 'libobjcryst-%(version)s/' % ginfo
    gitcmd = ('git -c tar.umask=0022 archive '
              '--prefix=%s --output=$TARGET HEAD') % prefix
    actions.append(gitcmd)
    actions.append(add_version_and_compress)
    actions.append(Delete('$TARGET'))
    dst = '${TARGET.base}-%(version)s${TARGET.suffix}.gz' % ginfo
    actions.append(Move(dst, '${TARGET}.gz'))
    return actions


env.Append(BUILDERS={'BuildSourceDistribution' :
    Builder(generator=generate_sdist_actions, suffix='.tar')})

# build node for version.hpp
vh = [f for f in env['lib_includes'] if str(f).endswith('ObjCryst/version.h')]

sdist = Alias('sdist', env.BuildSourceDistribution('#/libobjcryst', vh))
AlwaysBuild(sdist)

# vim: ft=python
